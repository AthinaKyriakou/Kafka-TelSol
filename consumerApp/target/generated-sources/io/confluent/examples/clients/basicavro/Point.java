/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package io.confluent.examples.clients.basicavro;

import org.apache.avro.generic.GenericArray;
import org.apache.avro.specific.SpecificData;
import org.apache.avro.util.Utf8;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

@org.apache.avro.specific.AvroGenerated
public class Point extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = 4379284879096427244L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"Point\",\"namespace\":\"io.confluent.examples.clients.basicavro\",\"fields\":[{\"name\":\"id\",\"type\":\"string\"},{\"name\":\"type\",\"type\":\"string\"},{\"name\":\"location_latitude\",\"type\":\"string\"},{\"name\":\"location_longitude\",\"type\":\"string\"},{\"name\":\"address\",\"type\":\"string\"},{\"name\":\"splitted\",\"type\":\"string\"},{\"name\":\"ditch_type\",\"type\":\"string\"},{\"name\":\"ditch_depth\",\"type\":\"string\"},{\"name\":\"ditch_width\",\"type\":\"string\"},{\"name\":\"sewer_type\",\"type\":\"string\"},{\"name\":\"sewer_length\",\"type\":\"string\"},{\"name\":\"sewer_width\",\"type\":\"string\"},{\"name\":\"sewer_depth\",\"type\":\"string\"},{\"name\":\"sewer_cable_depth\",\"type\":\"string\"}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<Point> ENCODER =
      new BinaryMessageEncoder<Point>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<Point> DECODER =
      new BinaryMessageDecoder<Point>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageEncoder instance used by this class.
   * @return the message encoder used by this class
   */
  public static BinaryMessageEncoder<Point> getEncoder() {
    return ENCODER;
  }

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   * @return the message decoder used by this class
   */
  public static BinaryMessageDecoder<Point> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   * @return a BinaryMessageDecoder instance for this class backed by the given SchemaStore
   */
  public static BinaryMessageDecoder<Point> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<Point>(MODEL$, SCHEMA$, resolver);
  }

  /**
   * Serializes this Point to a ByteBuffer.
   * @return a buffer holding the serialized data for this instance
   * @throws java.io.IOException if this instance could not be serialized
   */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /**
   * Deserializes a Point from a ByteBuffer.
   * @param b a byte buffer holding serialized data for an instance of this class
   * @return a Point instance decoded from the given buffer
   * @throws java.io.IOException if the given bytes could not be deserialized into an instance of this class
   */
  public static Point fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

  @Deprecated public java.lang.CharSequence id;
  @Deprecated public java.lang.CharSequence type;
  @Deprecated public java.lang.CharSequence location_latitude;
  @Deprecated public java.lang.CharSequence location_longitude;
  @Deprecated public java.lang.CharSequence address;
  @Deprecated public java.lang.CharSequence splitted;
  @Deprecated public java.lang.CharSequence ditch_type;
  @Deprecated public java.lang.CharSequence ditch_depth;
  @Deprecated public java.lang.CharSequence ditch_width;
  @Deprecated public java.lang.CharSequence sewer_type;
  @Deprecated public java.lang.CharSequence sewer_length;
  @Deprecated public java.lang.CharSequence sewer_width;
  @Deprecated public java.lang.CharSequence sewer_depth;
  @Deprecated public java.lang.CharSequence sewer_cable_depth;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public Point() {}

  /**
   * All-args constructor.
   * @param id The new value for id
   * @param type The new value for type
   * @param location_latitude The new value for location_latitude
   * @param location_longitude The new value for location_longitude
   * @param address The new value for address
   * @param splitted The new value for splitted
   * @param ditch_type The new value for ditch_type
   * @param ditch_depth The new value for ditch_depth
   * @param ditch_width The new value for ditch_width
   * @param sewer_type The new value for sewer_type
   * @param sewer_length The new value for sewer_length
   * @param sewer_width The new value for sewer_width
   * @param sewer_depth The new value for sewer_depth
   * @param sewer_cable_depth The new value for sewer_cable_depth
   */
  public Point(java.lang.CharSequence id, java.lang.CharSequence type, java.lang.CharSequence location_latitude, java.lang.CharSequence location_longitude, java.lang.CharSequence address, java.lang.CharSequence splitted, java.lang.CharSequence ditch_type, java.lang.CharSequence ditch_depth, java.lang.CharSequence ditch_width, java.lang.CharSequence sewer_type, java.lang.CharSequence sewer_length, java.lang.CharSequence sewer_width, java.lang.CharSequence sewer_depth, java.lang.CharSequence sewer_cable_depth) {
    this.id = id;
    this.type = type;
    this.location_latitude = location_latitude;
    this.location_longitude = location_longitude;
    this.address = address;
    this.splitted = splitted;
    this.ditch_type = ditch_type;
    this.ditch_depth = ditch_depth;
    this.ditch_width = ditch_width;
    this.sewer_type = sewer_type;
    this.sewer_length = sewer_length;
    this.sewer_width = sewer_width;
    this.sewer_depth = sewer_depth;
    this.sewer_cable_depth = sewer_cable_depth;
  }

  public org.apache.avro.specific.SpecificData getSpecificData() { return MODEL$; }
  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return id;
    case 1: return type;
    case 2: return location_latitude;
    case 3: return location_longitude;
    case 4: return address;
    case 5: return splitted;
    case 6: return ditch_type;
    case 7: return ditch_depth;
    case 8: return ditch_width;
    case 9: return sewer_type;
    case 10: return sewer_length;
    case 11: return sewer_width;
    case 12: return sewer_depth;
    case 13: return sewer_cable_depth;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: id = (java.lang.CharSequence)value$; break;
    case 1: type = (java.lang.CharSequence)value$; break;
    case 2: location_latitude = (java.lang.CharSequence)value$; break;
    case 3: location_longitude = (java.lang.CharSequence)value$; break;
    case 4: address = (java.lang.CharSequence)value$; break;
    case 5: splitted = (java.lang.CharSequence)value$; break;
    case 6: ditch_type = (java.lang.CharSequence)value$; break;
    case 7: ditch_depth = (java.lang.CharSequence)value$; break;
    case 8: ditch_width = (java.lang.CharSequence)value$; break;
    case 9: sewer_type = (java.lang.CharSequence)value$; break;
    case 10: sewer_length = (java.lang.CharSequence)value$; break;
    case 11: sewer_width = (java.lang.CharSequence)value$; break;
    case 12: sewer_depth = (java.lang.CharSequence)value$; break;
    case 13: sewer_cable_depth = (java.lang.CharSequence)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'id' field.
   * @return The value of the 'id' field.
   */
  public java.lang.CharSequence getId() {
    return id;
  }


  /**
   * Sets the value of the 'id' field.
   * @param value the value to set.
   */
  public void setId(java.lang.CharSequence value) {
    this.id = value;
  }

  /**
   * Gets the value of the 'type' field.
   * @return The value of the 'type' field.
   */
  public java.lang.CharSequence getType() {
    return type;
  }


  /**
   * Sets the value of the 'type' field.
   * @param value the value to set.
   */
  public void setType(java.lang.CharSequence value) {
    this.type = value;
  }

  /**
   * Gets the value of the 'location_latitude' field.
   * @return The value of the 'location_latitude' field.
   */
  public java.lang.CharSequence getLocationLatitude() {
    return location_latitude;
  }


  /**
   * Sets the value of the 'location_latitude' field.
   * @param value the value to set.
   */
  public void setLocationLatitude(java.lang.CharSequence value) {
    this.location_latitude = value;
  }

  /**
   * Gets the value of the 'location_longitude' field.
   * @return The value of the 'location_longitude' field.
   */
  public java.lang.CharSequence getLocationLongitude() {
    return location_longitude;
  }


  /**
   * Sets the value of the 'location_longitude' field.
   * @param value the value to set.
   */
  public void setLocationLongitude(java.lang.CharSequence value) {
    this.location_longitude = value;
  }

  /**
   * Gets the value of the 'address' field.
   * @return The value of the 'address' field.
   */
  public java.lang.CharSequence getAddress() {
    return address;
  }


  /**
   * Sets the value of the 'address' field.
   * @param value the value to set.
   */
  public void setAddress(java.lang.CharSequence value) {
    this.address = value;
  }

  /**
   * Gets the value of the 'splitted' field.
   * @return The value of the 'splitted' field.
   */
  public java.lang.CharSequence getSplitted() {
    return splitted;
  }


  /**
   * Sets the value of the 'splitted' field.
   * @param value the value to set.
   */
  public void setSplitted(java.lang.CharSequence value) {
    this.splitted = value;
  }

  /**
   * Gets the value of the 'ditch_type' field.
   * @return The value of the 'ditch_type' field.
   */
  public java.lang.CharSequence getDitchType() {
    return ditch_type;
  }


  /**
   * Sets the value of the 'ditch_type' field.
   * @param value the value to set.
   */
  public void setDitchType(java.lang.CharSequence value) {
    this.ditch_type = value;
  }

  /**
   * Gets the value of the 'ditch_depth' field.
   * @return The value of the 'ditch_depth' field.
   */
  public java.lang.CharSequence getDitchDepth() {
    return ditch_depth;
  }


  /**
   * Sets the value of the 'ditch_depth' field.
   * @param value the value to set.
   */
  public void setDitchDepth(java.lang.CharSequence value) {
    this.ditch_depth = value;
  }

  /**
   * Gets the value of the 'ditch_width' field.
   * @return The value of the 'ditch_width' field.
   */
  public java.lang.CharSequence getDitchWidth() {
    return ditch_width;
  }


  /**
   * Sets the value of the 'ditch_width' field.
   * @param value the value to set.
   */
  public void setDitchWidth(java.lang.CharSequence value) {
    this.ditch_width = value;
  }

  /**
   * Gets the value of the 'sewer_type' field.
   * @return The value of the 'sewer_type' field.
   */
  public java.lang.CharSequence getSewerType() {
    return sewer_type;
  }


  /**
   * Sets the value of the 'sewer_type' field.
   * @param value the value to set.
   */
  public void setSewerType(java.lang.CharSequence value) {
    this.sewer_type = value;
  }

  /**
   * Gets the value of the 'sewer_length' field.
   * @return The value of the 'sewer_length' field.
   */
  public java.lang.CharSequence getSewerLength() {
    return sewer_length;
  }


  /**
   * Sets the value of the 'sewer_length' field.
   * @param value the value to set.
   */
  public void setSewerLength(java.lang.CharSequence value) {
    this.sewer_length = value;
  }

  /**
   * Gets the value of the 'sewer_width' field.
   * @return The value of the 'sewer_width' field.
   */
  public java.lang.CharSequence getSewerWidth() {
    return sewer_width;
  }


  /**
   * Sets the value of the 'sewer_width' field.
   * @param value the value to set.
   */
  public void setSewerWidth(java.lang.CharSequence value) {
    this.sewer_width = value;
  }

  /**
   * Gets the value of the 'sewer_depth' field.
   * @return The value of the 'sewer_depth' field.
   */
  public java.lang.CharSequence getSewerDepth() {
    return sewer_depth;
  }


  /**
   * Sets the value of the 'sewer_depth' field.
   * @param value the value to set.
   */
  public void setSewerDepth(java.lang.CharSequence value) {
    this.sewer_depth = value;
  }

  /**
   * Gets the value of the 'sewer_cable_depth' field.
   * @return The value of the 'sewer_cable_depth' field.
   */
  public java.lang.CharSequence getSewerCableDepth() {
    return sewer_cable_depth;
  }


  /**
   * Sets the value of the 'sewer_cable_depth' field.
   * @param value the value to set.
   */
  public void setSewerCableDepth(java.lang.CharSequence value) {
    this.sewer_cable_depth = value;
  }

  /**
   * Creates a new Point RecordBuilder.
   * @return A new Point RecordBuilder
   */
  public static io.confluent.examples.clients.basicavro.Point.Builder newBuilder() {
    return new io.confluent.examples.clients.basicavro.Point.Builder();
  }

  /**
   * Creates a new Point RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new Point RecordBuilder
   */
  public static io.confluent.examples.clients.basicavro.Point.Builder newBuilder(io.confluent.examples.clients.basicavro.Point.Builder other) {
    if (other == null) {
      return new io.confluent.examples.clients.basicavro.Point.Builder();
    } else {
      return new io.confluent.examples.clients.basicavro.Point.Builder(other);
    }
  }

  /**
   * Creates a new Point RecordBuilder by copying an existing Point instance.
   * @param other The existing instance to copy.
   * @return A new Point RecordBuilder
   */
  public static io.confluent.examples.clients.basicavro.Point.Builder newBuilder(io.confluent.examples.clients.basicavro.Point other) {
    if (other == null) {
      return new io.confluent.examples.clients.basicavro.Point.Builder();
    } else {
      return new io.confluent.examples.clients.basicavro.Point.Builder(other);
    }
  }

  /**
   * RecordBuilder for Point instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<Point>
    implements org.apache.avro.data.RecordBuilder<Point> {

    private java.lang.CharSequence id;
    private java.lang.CharSequence type;
    private java.lang.CharSequence location_latitude;
    private java.lang.CharSequence location_longitude;
    private java.lang.CharSequence address;
    private java.lang.CharSequence splitted;
    private java.lang.CharSequence ditch_type;
    private java.lang.CharSequence ditch_depth;
    private java.lang.CharSequence ditch_width;
    private java.lang.CharSequence sewer_type;
    private java.lang.CharSequence sewer_length;
    private java.lang.CharSequence sewer_width;
    private java.lang.CharSequence sewer_depth;
    private java.lang.CharSequence sewer_cable_depth;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(io.confluent.examples.clients.basicavro.Point.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.id)) {
        this.id = data().deepCopy(fields()[0].schema(), other.id);
        fieldSetFlags()[0] = other.fieldSetFlags()[0];
      }
      if (isValidValue(fields()[1], other.type)) {
        this.type = data().deepCopy(fields()[1].schema(), other.type);
        fieldSetFlags()[1] = other.fieldSetFlags()[1];
      }
      if (isValidValue(fields()[2], other.location_latitude)) {
        this.location_latitude = data().deepCopy(fields()[2].schema(), other.location_latitude);
        fieldSetFlags()[2] = other.fieldSetFlags()[2];
      }
      if (isValidValue(fields()[3], other.location_longitude)) {
        this.location_longitude = data().deepCopy(fields()[3].schema(), other.location_longitude);
        fieldSetFlags()[3] = other.fieldSetFlags()[3];
      }
      if (isValidValue(fields()[4], other.address)) {
        this.address = data().deepCopy(fields()[4].schema(), other.address);
        fieldSetFlags()[4] = other.fieldSetFlags()[4];
      }
      if (isValidValue(fields()[5], other.splitted)) {
        this.splitted = data().deepCopy(fields()[5].schema(), other.splitted);
        fieldSetFlags()[5] = other.fieldSetFlags()[5];
      }
      if (isValidValue(fields()[6], other.ditch_type)) {
        this.ditch_type = data().deepCopy(fields()[6].schema(), other.ditch_type);
        fieldSetFlags()[6] = other.fieldSetFlags()[6];
      }
      if (isValidValue(fields()[7], other.ditch_depth)) {
        this.ditch_depth = data().deepCopy(fields()[7].schema(), other.ditch_depth);
        fieldSetFlags()[7] = other.fieldSetFlags()[7];
      }
      if (isValidValue(fields()[8], other.ditch_width)) {
        this.ditch_width = data().deepCopy(fields()[8].schema(), other.ditch_width);
        fieldSetFlags()[8] = other.fieldSetFlags()[8];
      }
      if (isValidValue(fields()[9], other.sewer_type)) {
        this.sewer_type = data().deepCopy(fields()[9].schema(), other.sewer_type);
        fieldSetFlags()[9] = other.fieldSetFlags()[9];
      }
      if (isValidValue(fields()[10], other.sewer_length)) {
        this.sewer_length = data().deepCopy(fields()[10].schema(), other.sewer_length);
        fieldSetFlags()[10] = other.fieldSetFlags()[10];
      }
      if (isValidValue(fields()[11], other.sewer_width)) {
        this.sewer_width = data().deepCopy(fields()[11].schema(), other.sewer_width);
        fieldSetFlags()[11] = other.fieldSetFlags()[11];
      }
      if (isValidValue(fields()[12], other.sewer_depth)) {
        this.sewer_depth = data().deepCopy(fields()[12].schema(), other.sewer_depth);
        fieldSetFlags()[12] = other.fieldSetFlags()[12];
      }
      if (isValidValue(fields()[13], other.sewer_cable_depth)) {
        this.sewer_cable_depth = data().deepCopy(fields()[13].schema(), other.sewer_cable_depth);
        fieldSetFlags()[13] = other.fieldSetFlags()[13];
      }
    }

    /**
     * Creates a Builder by copying an existing Point instance
     * @param other The existing instance to copy.
     */
    private Builder(io.confluent.examples.clients.basicavro.Point other) {
      super(SCHEMA$);
      if (isValidValue(fields()[0], other.id)) {
        this.id = data().deepCopy(fields()[0].schema(), other.id);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.type)) {
        this.type = data().deepCopy(fields()[1].schema(), other.type);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.location_latitude)) {
        this.location_latitude = data().deepCopy(fields()[2].schema(), other.location_latitude);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.location_longitude)) {
        this.location_longitude = data().deepCopy(fields()[3].schema(), other.location_longitude);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.address)) {
        this.address = data().deepCopy(fields()[4].schema(), other.address);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.splitted)) {
        this.splitted = data().deepCopy(fields()[5].schema(), other.splitted);
        fieldSetFlags()[5] = true;
      }
      if (isValidValue(fields()[6], other.ditch_type)) {
        this.ditch_type = data().deepCopy(fields()[6].schema(), other.ditch_type);
        fieldSetFlags()[6] = true;
      }
      if (isValidValue(fields()[7], other.ditch_depth)) {
        this.ditch_depth = data().deepCopy(fields()[7].schema(), other.ditch_depth);
        fieldSetFlags()[7] = true;
      }
      if (isValidValue(fields()[8], other.ditch_width)) {
        this.ditch_width = data().deepCopy(fields()[8].schema(), other.ditch_width);
        fieldSetFlags()[8] = true;
      }
      if (isValidValue(fields()[9], other.sewer_type)) {
        this.sewer_type = data().deepCopy(fields()[9].schema(), other.sewer_type);
        fieldSetFlags()[9] = true;
      }
      if (isValidValue(fields()[10], other.sewer_length)) {
        this.sewer_length = data().deepCopy(fields()[10].schema(), other.sewer_length);
        fieldSetFlags()[10] = true;
      }
      if (isValidValue(fields()[11], other.sewer_width)) {
        this.sewer_width = data().deepCopy(fields()[11].schema(), other.sewer_width);
        fieldSetFlags()[11] = true;
      }
      if (isValidValue(fields()[12], other.sewer_depth)) {
        this.sewer_depth = data().deepCopy(fields()[12].schema(), other.sewer_depth);
        fieldSetFlags()[12] = true;
      }
      if (isValidValue(fields()[13], other.sewer_cable_depth)) {
        this.sewer_cable_depth = data().deepCopy(fields()[13].schema(), other.sewer_cable_depth);
        fieldSetFlags()[13] = true;
      }
    }

    /**
      * Gets the value of the 'id' field.
      * @return The value.
      */
    public java.lang.CharSequence getId() {
      return id;
    }


    /**
      * Sets the value of the 'id' field.
      * @param value The value of 'id'.
      * @return This builder.
      */
    public io.confluent.examples.clients.basicavro.Point.Builder setId(java.lang.CharSequence value) {
      validate(fields()[0], value);
      this.id = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'id' field has been set.
      * @return True if the 'id' field has been set, false otherwise.
      */
    public boolean hasId() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'id' field.
      * @return This builder.
      */
    public io.confluent.examples.clients.basicavro.Point.Builder clearId() {
      id = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'type' field.
      * @return The value.
      */
    public java.lang.CharSequence getType() {
      return type;
    }


    /**
      * Sets the value of the 'type' field.
      * @param value The value of 'type'.
      * @return This builder.
      */
    public io.confluent.examples.clients.basicavro.Point.Builder setType(java.lang.CharSequence value) {
      validate(fields()[1], value);
      this.type = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'type' field has been set.
      * @return True if the 'type' field has been set, false otherwise.
      */
    public boolean hasType() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'type' field.
      * @return This builder.
      */
    public io.confluent.examples.clients.basicavro.Point.Builder clearType() {
      type = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'location_latitude' field.
      * @return The value.
      */
    public java.lang.CharSequence getLocationLatitude() {
      return location_latitude;
    }


    /**
      * Sets the value of the 'location_latitude' field.
      * @param value The value of 'location_latitude'.
      * @return This builder.
      */
    public io.confluent.examples.clients.basicavro.Point.Builder setLocationLatitude(java.lang.CharSequence value) {
      validate(fields()[2], value);
      this.location_latitude = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'location_latitude' field has been set.
      * @return True if the 'location_latitude' field has been set, false otherwise.
      */
    public boolean hasLocationLatitude() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'location_latitude' field.
      * @return This builder.
      */
    public io.confluent.examples.clients.basicavro.Point.Builder clearLocationLatitude() {
      location_latitude = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'location_longitude' field.
      * @return The value.
      */
    public java.lang.CharSequence getLocationLongitude() {
      return location_longitude;
    }


    /**
      * Sets the value of the 'location_longitude' field.
      * @param value The value of 'location_longitude'.
      * @return This builder.
      */
    public io.confluent.examples.clients.basicavro.Point.Builder setLocationLongitude(java.lang.CharSequence value) {
      validate(fields()[3], value);
      this.location_longitude = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'location_longitude' field has been set.
      * @return True if the 'location_longitude' field has been set, false otherwise.
      */
    public boolean hasLocationLongitude() {
      return fieldSetFlags()[3];
    }


    /**
      * Clears the value of the 'location_longitude' field.
      * @return This builder.
      */
    public io.confluent.examples.clients.basicavro.Point.Builder clearLocationLongitude() {
      location_longitude = null;
      fieldSetFlags()[3] = false;
      return this;
    }

    /**
      * Gets the value of the 'address' field.
      * @return The value.
      */
    public java.lang.CharSequence getAddress() {
      return address;
    }


    /**
      * Sets the value of the 'address' field.
      * @param value The value of 'address'.
      * @return This builder.
      */
    public io.confluent.examples.clients.basicavro.Point.Builder setAddress(java.lang.CharSequence value) {
      validate(fields()[4], value);
      this.address = value;
      fieldSetFlags()[4] = true;
      return this;
    }

    /**
      * Checks whether the 'address' field has been set.
      * @return True if the 'address' field has been set, false otherwise.
      */
    public boolean hasAddress() {
      return fieldSetFlags()[4];
    }


    /**
      * Clears the value of the 'address' field.
      * @return This builder.
      */
    public io.confluent.examples.clients.basicavro.Point.Builder clearAddress() {
      address = null;
      fieldSetFlags()[4] = false;
      return this;
    }

    /**
      * Gets the value of the 'splitted' field.
      * @return The value.
      */
    public java.lang.CharSequence getSplitted() {
      return splitted;
    }


    /**
      * Sets the value of the 'splitted' field.
      * @param value The value of 'splitted'.
      * @return This builder.
      */
    public io.confluent.examples.clients.basicavro.Point.Builder setSplitted(java.lang.CharSequence value) {
      validate(fields()[5], value);
      this.splitted = value;
      fieldSetFlags()[5] = true;
      return this;
    }

    /**
      * Checks whether the 'splitted' field has been set.
      * @return True if the 'splitted' field has been set, false otherwise.
      */
    public boolean hasSplitted() {
      return fieldSetFlags()[5];
    }


    /**
      * Clears the value of the 'splitted' field.
      * @return This builder.
      */
    public io.confluent.examples.clients.basicavro.Point.Builder clearSplitted() {
      splitted = null;
      fieldSetFlags()[5] = false;
      return this;
    }

    /**
      * Gets the value of the 'ditch_type' field.
      * @return The value.
      */
    public java.lang.CharSequence getDitchType() {
      return ditch_type;
    }


    /**
      * Sets the value of the 'ditch_type' field.
      * @param value The value of 'ditch_type'.
      * @return This builder.
      */
    public io.confluent.examples.clients.basicavro.Point.Builder setDitchType(java.lang.CharSequence value) {
      validate(fields()[6], value);
      this.ditch_type = value;
      fieldSetFlags()[6] = true;
      return this;
    }

    /**
      * Checks whether the 'ditch_type' field has been set.
      * @return True if the 'ditch_type' field has been set, false otherwise.
      */
    public boolean hasDitchType() {
      return fieldSetFlags()[6];
    }


    /**
      * Clears the value of the 'ditch_type' field.
      * @return This builder.
      */
    public io.confluent.examples.clients.basicavro.Point.Builder clearDitchType() {
      ditch_type = null;
      fieldSetFlags()[6] = false;
      return this;
    }

    /**
      * Gets the value of the 'ditch_depth' field.
      * @return The value.
      */
    public java.lang.CharSequence getDitchDepth() {
      return ditch_depth;
    }


    /**
      * Sets the value of the 'ditch_depth' field.
      * @param value The value of 'ditch_depth'.
      * @return This builder.
      */
    public io.confluent.examples.clients.basicavro.Point.Builder setDitchDepth(java.lang.CharSequence value) {
      validate(fields()[7], value);
      this.ditch_depth = value;
      fieldSetFlags()[7] = true;
      return this;
    }

    /**
      * Checks whether the 'ditch_depth' field has been set.
      * @return True if the 'ditch_depth' field has been set, false otherwise.
      */
    public boolean hasDitchDepth() {
      return fieldSetFlags()[7];
    }


    /**
      * Clears the value of the 'ditch_depth' field.
      * @return This builder.
      */
    public io.confluent.examples.clients.basicavro.Point.Builder clearDitchDepth() {
      ditch_depth = null;
      fieldSetFlags()[7] = false;
      return this;
    }

    /**
      * Gets the value of the 'ditch_width' field.
      * @return The value.
      */
    public java.lang.CharSequence getDitchWidth() {
      return ditch_width;
    }


    /**
      * Sets the value of the 'ditch_width' field.
      * @param value The value of 'ditch_width'.
      * @return This builder.
      */
    public io.confluent.examples.clients.basicavro.Point.Builder setDitchWidth(java.lang.CharSequence value) {
      validate(fields()[8], value);
      this.ditch_width = value;
      fieldSetFlags()[8] = true;
      return this;
    }

    /**
      * Checks whether the 'ditch_width' field has been set.
      * @return True if the 'ditch_width' field has been set, false otherwise.
      */
    public boolean hasDitchWidth() {
      return fieldSetFlags()[8];
    }


    /**
      * Clears the value of the 'ditch_width' field.
      * @return This builder.
      */
    public io.confluent.examples.clients.basicavro.Point.Builder clearDitchWidth() {
      ditch_width = null;
      fieldSetFlags()[8] = false;
      return this;
    }

    /**
      * Gets the value of the 'sewer_type' field.
      * @return The value.
      */
    public java.lang.CharSequence getSewerType() {
      return sewer_type;
    }


    /**
      * Sets the value of the 'sewer_type' field.
      * @param value The value of 'sewer_type'.
      * @return This builder.
      */
    public io.confluent.examples.clients.basicavro.Point.Builder setSewerType(java.lang.CharSequence value) {
      validate(fields()[9], value);
      this.sewer_type = value;
      fieldSetFlags()[9] = true;
      return this;
    }

    /**
      * Checks whether the 'sewer_type' field has been set.
      * @return True if the 'sewer_type' field has been set, false otherwise.
      */
    public boolean hasSewerType() {
      return fieldSetFlags()[9];
    }


    /**
      * Clears the value of the 'sewer_type' field.
      * @return This builder.
      */
    public io.confluent.examples.clients.basicavro.Point.Builder clearSewerType() {
      sewer_type = null;
      fieldSetFlags()[9] = false;
      return this;
    }

    /**
      * Gets the value of the 'sewer_length' field.
      * @return The value.
      */
    public java.lang.CharSequence getSewerLength() {
      return sewer_length;
    }


    /**
      * Sets the value of the 'sewer_length' field.
      * @param value The value of 'sewer_length'.
      * @return This builder.
      */
    public io.confluent.examples.clients.basicavro.Point.Builder setSewerLength(java.lang.CharSequence value) {
      validate(fields()[10], value);
      this.sewer_length = value;
      fieldSetFlags()[10] = true;
      return this;
    }

    /**
      * Checks whether the 'sewer_length' field has been set.
      * @return True if the 'sewer_length' field has been set, false otherwise.
      */
    public boolean hasSewerLength() {
      return fieldSetFlags()[10];
    }


    /**
      * Clears the value of the 'sewer_length' field.
      * @return This builder.
      */
    public io.confluent.examples.clients.basicavro.Point.Builder clearSewerLength() {
      sewer_length = null;
      fieldSetFlags()[10] = false;
      return this;
    }

    /**
      * Gets the value of the 'sewer_width' field.
      * @return The value.
      */
    public java.lang.CharSequence getSewerWidth() {
      return sewer_width;
    }


    /**
      * Sets the value of the 'sewer_width' field.
      * @param value The value of 'sewer_width'.
      * @return This builder.
      */
    public io.confluent.examples.clients.basicavro.Point.Builder setSewerWidth(java.lang.CharSequence value) {
      validate(fields()[11], value);
      this.sewer_width = value;
      fieldSetFlags()[11] = true;
      return this;
    }

    /**
      * Checks whether the 'sewer_width' field has been set.
      * @return True if the 'sewer_width' field has been set, false otherwise.
      */
    public boolean hasSewerWidth() {
      return fieldSetFlags()[11];
    }


    /**
      * Clears the value of the 'sewer_width' field.
      * @return This builder.
      */
    public io.confluent.examples.clients.basicavro.Point.Builder clearSewerWidth() {
      sewer_width = null;
      fieldSetFlags()[11] = false;
      return this;
    }

    /**
      * Gets the value of the 'sewer_depth' field.
      * @return The value.
      */
    public java.lang.CharSequence getSewerDepth() {
      return sewer_depth;
    }


    /**
      * Sets the value of the 'sewer_depth' field.
      * @param value The value of 'sewer_depth'.
      * @return This builder.
      */
    public io.confluent.examples.clients.basicavro.Point.Builder setSewerDepth(java.lang.CharSequence value) {
      validate(fields()[12], value);
      this.sewer_depth = value;
      fieldSetFlags()[12] = true;
      return this;
    }

    /**
      * Checks whether the 'sewer_depth' field has been set.
      * @return True if the 'sewer_depth' field has been set, false otherwise.
      */
    public boolean hasSewerDepth() {
      return fieldSetFlags()[12];
    }


    /**
      * Clears the value of the 'sewer_depth' field.
      * @return This builder.
      */
    public io.confluent.examples.clients.basicavro.Point.Builder clearSewerDepth() {
      sewer_depth = null;
      fieldSetFlags()[12] = false;
      return this;
    }

    /**
      * Gets the value of the 'sewer_cable_depth' field.
      * @return The value.
      */
    public java.lang.CharSequence getSewerCableDepth() {
      return sewer_cable_depth;
    }


    /**
      * Sets the value of the 'sewer_cable_depth' field.
      * @param value The value of 'sewer_cable_depth'.
      * @return This builder.
      */
    public io.confluent.examples.clients.basicavro.Point.Builder setSewerCableDepth(java.lang.CharSequence value) {
      validate(fields()[13], value);
      this.sewer_cable_depth = value;
      fieldSetFlags()[13] = true;
      return this;
    }

    /**
      * Checks whether the 'sewer_cable_depth' field has been set.
      * @return True if the 'sewer_cable_depth' field has been set, false otherwise.
      */
    public boolean hasSewerCableDepth() {
      return fieldSetFlags()[13];
    }


    /**
      * Clears the value of the 'sewer_cable_depth' field.
      * @return This builder.
      */
    public io.confluent.examples.clients.basicavro.Point.Builder clearSewerCableDepth() {
      sewer_cable_depth = null;
      fieldSetFlags()[13] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public Point build() {
      try {
        Point record = new Point();
        record.id = fieldSetFlags()[0] ? this.id : (java.lang.CharSequence) defaultValue(fields()[0]);
        record.type = fieldSetFlags()[1] ? this.type : (java.lang.CharSequence) defaultValue(fields()[1]);
        record.location_latitude = fieldSetFlags()[2] ? this.location_latitude : (java.lang.CharSequence) defaultValue(fields()[2]);
        record.location_longitude = fieldSetFlags()[3] ? this.location_longitude : (java.lang.CharSequence) defaultValue(fields()[3]);
        record.address = fieldSetFlags()[4] ? this.address : (java.lang.CharSequence) defaultValue(fields()[4]);
        record.splitted = fieldSetFlags()[5] ? this.splitted : (java.lang.CharSequence) defaultValue(fields()[5]);
        record.ditch_type = fieldSetFlags()[6] ? this.ditch_type : (java.lang.CharSequence) defaultValue(fields()[6]);
        record.ditch_depth = fieldSetFlags()[7] ? this.ditch_depth : (java.lang.CharSequence) defaultValue(fields()[7]);
        record.ditch_width = fieldSetFlags()[8] ? this.ditch_width : (java.lang.CharSequence) defaultValue(fields()[8]);
        record.sewer_type = fieldSetFlags()[9] ? this.sewer_type : (java.lang.CharSequence) defaultValue(fields()[9]);
        record.sewer_length = fieldSetFlags()[10] ? this.sewer_length : (java.lang.CharSequence) defaultValue(fields()[10]);
        record.sewer_width = fieldSetFlags()[11] ? this.sewer_width : (java.lang.CharSequence) defaultValue(fields()[11]);
        record.sewer_depth = fieldSetFlags()[12] ? this.sewer_depth : (java.lang.CharSequence) defaultValue(fields()[12]);
        record.sewer_cable_depth = fieldSetFlags()[13] ? this.sewer_cable_depth : (java.lang.CharSequence) defaultValue(fields()[13]);
        return record;
      } catch (org.apache.avro.AvroMissingFieldException e) {
        throw e;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<Point>
    WRITER$ = (org.apache.avro.io.DatumWriter<Point>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<Point>
    READER$ = (org.apache.avro.io.DatumReader<Point>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

  @Override protected boolean hasCustomCoders() { return true; }

  @Override public void customEncode(org.apache.avro.io.Encoder out)
    throws java.io.IOException
  {
    out.writeString(this.id);

    out.writeString(this.type);

    out.writeString(this.location_latitude);

    out.writeString(this.location_longitude);

    out.writeString(this.address);

    out.writeString(this.splitted);

    out.writeString(this.ditch_type);

    out.writeString(this.ditch_depth);

    out.writeString(this.ditch_width);

    out.writeString(this.sewer_type);

    out.writeString(this.sewer_length);

    out.writeString(this.sewer_width);

    out.writeString(this.sewer_depth);

    out.writeString(this.sewer_cable_depth);

  }

  @Override public void customDecode(org.apache.avro.io.ResolvingDecoder in)
    throws java.io.IOException
  {
    org.apache.avro.Schema.Field[] fieldOrder = in.readFieldOrderIfDiff();
    if (fieldOrder == null) {
      this.id = in.readString(this.id instanceof Utf8 ? (Utf8)this.id : null);

      this.type = in.readString(this.type instanceof Utf8 ? (Utf8)this.type : null);

      this.location_latitude = in.readString(this.location_latitude instanceof Utf8 ? (Utf8)this.location_latitude : null);

      this.location_longitude = in.readString(this.location_longitude instanceof Utf8 ? (Utf8)this.location_longitude : null);

      this.address = in.readString(this.address instanceof Utf8 ? (Utf8)this.address : null);

      this.splitted = in.readString(this.splitted instanceof Utf8 ? (Utf8)this.splitted : null);

      this.ditch_type = in.readString(this.ditch_type instanceof Utf8 ? (Utf8)this.ditch_type : null);

      this.ditch_depth = in.readString(this.ditch_depth instanceof Utf8 ? (Utf8)this.ditch_depth : null);

      this.ditch_width = in.readString(this.ditch_width instanceof Utf8 ? (Utf8)this.ditch_width : null);

      this.sewer_type = in.readString(this.sewer_type instanceof Utf8 ? (Utf8)this.sewer_type : null);

      this.sewer_length = in.readString(this.sewer_length instanceof Utf8 ? (Utf8)this.sewer_length : null);

      this.sewer_width = in.readString(this.sewer_width instanceof Utf8 ? (Utf8)this.sewer_width : null);

      this.sewer_depth = in.readString(this.sewer_depth instanceof Utf8 ? (Utf8)this.sewer_depth : null);

      this.sewer_cable_depth = in.readString(this.sewer_cable_depth instanceof Utf8 ? (Utf8)this.sewer_cable_depth : null);

    } else {
      for (int i = 0; i < 14; i++) {
        switch (fieldOrder[i].pos()) {
        case 0:
          this.id = in.readString(this.id instanceof Utf8 ? (Utf8)this.id : null);
          break;

        case 1:
          this.type = in.readString(this.type instanceof Utf8 ? (Utf8)this.type : null);
          break;

        case 2:
          this.location_latitude = in.readString(this.location_latitude instanceof Utf8 ? (Utf8)this.location_latitude : null);
          break;

        case 3:
          this.location_longitude = in.readString(this.location_longitude instanceof Utf8 ? (Utf8)this.location_longitude : null);
          break;

        case 4:
          this.address = in.readString(this.address instanceof Utf8 ? (Utf8)this.address : null);
          break;

        case 5:
          this.splitted = in.readString(this.splitted instanceof Utf8 ? (Utf8)this.splitted : null);
          break;

        case 6:
          this.ditch_type = in.readString(this.ditch_type instanceof Utf8 ? (Utf8)this.ditch_type : null);
          break;

        case 7:
          this.ditch_depth = in.readString(this.ditch_depth instanceof Utf8 ? (Utf8)this.ditch_depth : null);
          break;

        case 8:
          this.ditch_width = in.readString(this.ditch_width instanceof Utf8 ? (Utf8)this.ditch_width : null);
          break;

        case 9:
          this.sewer_type = in.readString(this.sewer_type instanceof Utf8 ? (Utf8)this.sewer_type : null);
          break;

        case 10:
          this.sewer_length = in.readString(this.sewer_length instanceof Utf8 ? (Utf8)this.sewer_length : null);
          break;

        case 11:
          this.sewer_width = in.readString(this.sewer_width instanceof Utf8 ? (Utf8)this.sewer_width : null);
          break;

        case 12:
          this.sewer_depth = in.readString(this.sewer_depth instanceof Utf8 ? (Utf8)this.sewer_depth : null);
          break;

        case 13:
          this.sewer_cable_depth = in.readString(this.sewer_cable_depth instanceof Utf8 ? (Utf8)this.sewer_cable_depth : null);
          break;

        default:
          throw new java.io.IOException("Corrupt ResolvingDecoder.");
        }
      }
    }
  }
}










